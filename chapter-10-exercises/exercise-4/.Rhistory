}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays[[me]]))
# birthdays list of immediate family
birthdays <- c(me = as.Date("2000-10-09"), dad = as.Date("1970-06-09"), mom = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$me))
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$me))
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$me))
# birthdays list of immediate family
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(birthdays$me)
my_bday <- as.Date("2000-10-09")
print(my_bday)
my_bday <- as.Date("2000-10-09")
class(my_bday)
print(birthdays[["Kunal"]])
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$Kunal))
birthdays <- list(Kunal = as.Date("2000-01-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$Kunal))
# birthdays list of immediate family
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$Kunal)) # correctly gives October 9th of this year
# get a list of the next birthdays
next_birthdays <- list(get_next_birthday(birthdays))
print(next_birthdays)
# birthdays list of immediate family
birthdays <- list(Kunal = as.Date("2000-10-09"), Prasad = as.Date("1970-06-09"), Sushanta = as.Date("1973-04-28"))
print(birthdays)
# create a function get_next_birthday that gets the next birthday of a person and takes in a birthdate
get_next_birthday <- function(birthdate) {
next_bday <- change_year(birthdate, 2020)
# I can use the ignore_year function of my date_has_passed, but I will follow the guidelines on Canvas
if (date_has_passed(next_bday)) {
next_bday <- change_year(birthdate, 2021)
}
return(next_bday)
}
# test get_next_birthday using my birthday
print(get_next_birthday(birthdays$Kunal)) # correctly gives October 9th of this year
# get a list of the next birthdays
next_birthdays <- list(lapply(birthdays, get_next_birthday))
print(next_birthdays)
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
if (extra_credit) {
grade <- grade + 0.3
}
return(grade)
}
print(psych_grade(90, 90, 100, 80))
print(round(123.12345, digits = 4))
print(round(123.12345, digits = 1))
print(psych_grade(90, 90, 100, 80))
print(psych_grade(90, 90, 100, 80))
print(psych_grade(90, 90, 100, 80))
print(psych_grade(90, 90, 100, 80))
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
gpa <- round((grade-55)/10, digits = 1)
print(gpa)
if (extra_credit) {
gpa <- gpa + 0.3
}
print(gpa)
return(gpa)
}
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
gpa <- round((grade-55)/10, digits = 1)
if (extra_credit) {
gpa <- gpa + 0.3
}
return(gpa)
}
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
gpa <- round((grade-55)/10, digits = 1)
if (extra_credit) {
gpa <- gpa + 0.3
}
return(gpa)
}
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
gpa <- round((grade-55)/10, digits = 1)
if (extra_credit) {
gpa <- gpa + 0.3
}
return(gpa)
}
print(psych_grade(90, 90, 100, 80))
psych_grade <- function(exam, discussions, inquizitive, participation, course_review = 100, extra_credit = TRUE) {
grade <- exam*0.65 + discussions*0.15 + inquizitive*0.1 + participation*0.05 + course_review*0.05
gpa <- round((grade-55)/10, digits = 1)
if (extra_credit) {
gpa <- gpa + 0.3
}
return(gpa)
}
print(psych_grade(90, 90, 100, 80))
print(psych_grade(90, 95, 100, 80))
print(psych_grade(exam = 90, discussions = 95, inquizitive = 100, participation = 80))
print(psych_grade(exam = 90, discussions = 92.5, inquizitive = 100, participation = 90))
print(psych_grade(exam = 87, discussions = 92.5, inquizitive = 100, participation = 90))
print(psych_grade(exam = 87, discussions = 95, inquizitive = 100, participation = 90))
print(psych_grade(exam = 87, discussions = 95, inquizitive = 100, participation = 95))
print(psych_grade(exam = 90, discussions = 95, inquizitive = 100, participation = 95))
print(psych_grade(exam = 90, discussions = 90, inquizitive = 100, participation = 90))
print(psych_grade(exam = 90, discussions = 90, inquizitive = 100, participation = 92))
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
print(ta_grades)
print(nrow(ta_grades))
print(colnames)
print(colnames)
new_cc <- function(c1, c2, le) {
cols <- c("country", "X2018", "recent_change")
ccs <- le[le$country == c1 | le$country == c2, cols]
return(ccs)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(new_cc("United States", "Cuba", life_exp_df))
# life_exp_df contains the contents of life_expectancy_years.csv
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# function get_col_mean() takes a column from a data frame and returns the mean
get_col_mean <- function(column) {
mean <- mean(column, na.rm = TRUE)  # gets mean without accounting for NAs
return(mean)
}
# call get_col_mean to get average life expectancy in 2018
print(get_col_mean(life_exp_df$X2018))
# world_averages is a list of average life expectancies in different years
world_averages <- lapply(life_exp_df[,-1], FUN = get_col_mean)
# print the difference in life expectancy between 2018 and 1918
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# add a column, recent_change, to life_exp_df which contains the change in life
# expectancy from 1996 to 2016
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# num_small_gain is the number of countries whose life expectancy did not improve
# 1 or more years between 1996 to 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# most_improved is the name of the country with the largest gain in life expectancy
max_gain <- max(life_exp_df[, "recent_change"], na.rm = TRUE)
most_improved <- life_exp_df[life_exp_df$recent_change == max_gain, "country"]
print(most_improved)
# get_country_change takes a country's name and a data frame of life expectancies as
# parameters and returns the country's change in life expectancy between 1968 and 2018
get_country_change <- function(country_name, life_exp) {
life_exp$change <- life_exp$X2018 - life_exp$X1968  # find change in the two years
country_change <- life_exp[life_exp$country == country_name, "change"]
return(country_change)
}
# use get_country_change to get the change in Haiti between 1968 and 2018
print(get_country_change("Haiti", life_exp_df))
# function compare_countries takes two country names and a data frame of life expectancies
# as arguments and returns a new data frame representing a table with life expectancies in
# 2018 and the recent change
compare_countries <- function(country_one, country_two, life_exp) {
cols <- c("country", "X2018", "recent_change")      # the cols we want
country_one_df <- life_exp[life_exp$country == country_one, cols]   # df for just one country
country_two_df <- life_exp[life_exp$country == country_two, cols]   # df for the other country
# combine the two dfs from above as rows in a dataframe
both_country_df <- rbind(country_one_df, country_two_df)
return(both_country_df)
}
new_cc <- function(c1, c2, le) {
cols <- c("country", "X2018", "recent_change")
ccs <- le[le$country == c1 | le$country == c2, cols]
return(ccs)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(new_cc("United States", "Cuba", life_exp_df))
# life_exp_df contains the contents of life_expectancy_years.csv
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# function get_col_mean() takes a column from a data frame and returns the mean
get_col_mean <- function(column) {
mean <- mean(column, na.rm = TRUE)  # gets mean without accounting for NAs
return(mean)
}
# call get_col_mean to get average life expectancy in 2018
print(get_col_mean(life_exp_df$X2018))
# world_averages is a list of average life expectancies in different years
world_averages <- lapply(life_exp_df[,-1], FUN = get_col_mean)
# print the difference in life expectancy between 2018 and 1918
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# add a column, recent_change, to life_exp_df which contains the change in life
# expectancy from 1996 to 2016
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# num_small_gain is the number of countries whose life expectancy did not improve
# 1 or more years between 1996 to 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# most_improved is the name of the country with the largest gain in life expectancy
max_gain <- max(life_exp_df[, "recent_change"], na.rm = TRUE)
most_improved <- life_exp_df[life_exp_df$recent_change == max_gain, "country"]
print(most_improved)
# get_country_change takes a country's name and a data frame of life expectancies as
# parameters and returns the country's change in life expectancy between 1968 and 2018
get_country_change <- function(country_name, life_exp) {
life_exp$change <- life_exp$X2018 - life_exp$X1968  # find change in the two years
country_change <- life_exp[life_exp$country == country_name, "change"]
return(country_change)
}
# use get_country_change to get the change in Haiti between 1968 and 2018
print(get_country_change("Haiti", life_exp_df))
# function compare_countries takes two country names and a data frame of life expectancies
# as arguments and returns a new data frame representing a table with life expectancies in
# 2018 and the recent change
compare_countries <- function(country_one, country_two, life_exp) {
cols <- c("country", "X2018", "recent_change")      # the cols we want
country_one_df <- life_exp[life_exp$country == country_one, cols]   # df for just one country
country_two_df <- life_exp[life_exp$country == country_two, cols]   # df for the other country
# combine the two dfs from above as rows in a dataframe
both_country_df <- rbind(country_one_df, country_two_df)
return(both_country_df)
}
new_cc <- function(c1, c2, le) {
cols <- c("country", "X2018", "recent_change")
ccs <- le[le$country == c1 | le$country == c2, cols]
return(ccs)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(new_cc("United States", "Cuba", life_exp_df))
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
setwd("~/Library/CloudStorage/iCloud Drive/Documents/INFO 201/a3-using-data-kunalb123")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
compare_countries <- function(country_one, country_two, life_exp) {
cols <- c("country", "X2018", "recent_change")      # the cols we want
country_one_df <- life_exp[life_exp$country == country_one, cols]   # df for just one country
country_two_df <- life_exp[life_exp$country == country_two, cols]   # df for the other country
# combine the two dfs from above as rows in a dataframe
both_country_df <- rbind(country_one_df, country_two_df)
return(both_country_df)
}
new_cc <- function(c1, c2, le) {
cols <- c("country", "X2018", "recent_change")
ccs <- le[le$country == c1 | le$country == c2, cols]
return(ccs)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(new_cc("United States", "Cuba", life_exp_df))
print(us_vs_cuba)
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# function get_col_mean() takes a column from a data frame and returns the mean
get_col_mean <- function(column) {
mean <- mean(column, na.rm = TRUE)  # gets mean without accounting for NAs
return(mean)
}
# call get_col_mean to get average life expectancy in 2018
print(get_col_mean(life_exp_df$X2018))
# world_averages is a list of average life expectancies in different years
world_averages <- lapply(life_exp_df[,-1], FUN = get_col_mean)
# print the difference in life expectancy between 2018 and 1918
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# add a column, recent_change, to life_exp_df which contains the change in life
# expectancy from 1996 to 2016
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# num_small_gain is the number of countries whose life expectancy did not improve
# 1 or more years between 1996 to 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# most_improved is the name of the country with the largest gain in life expectancy
max_gain <- max(life_exp_df[, "recent_change"], na.rm = TRUE)
most_improved <- life_exp_df[life_exp_df$recent_change == max_gain, "country"]
print(most_improved)
# get_country_change takes a country's name and a data frame of life expectancies as
# parameters and returns the country's change in life expectancy between 1968 and 2018
get_country_change <- function(country_name, life_exp) {
life_exp$change <- life_exp$X2018 - life_exp$X1968  # find change in the two years
country_change <- life_exp[life_exp$country == country_name, "change"]
return(country_change)
}
# use get_country_change to get the change in Haiti between 1968 and 2018
print(get_country_change("Haiti", life_exp_df))
# function compare_countries takes two country names and a data frame of life expectancies
# as arguments and returns a new data frame representing a table with life expectancies in
# 2018 and the recent change
compare_countries <- function(country_one, country_two, life_exp) {
cols <- c("country", "X2018", "recent_change")      # the cols we want
country_one_df <- life_exp[life_exp$country == country_one, cols]   # df for just one country
country_two_df <- life_exp[life_exp$country == country_two, cols]   # df for the other country
# combine the two dfs from above as rows in a dataframe
both_country_df <- rbind(country_one_df, country_two_df)
return(both_country_df)
}
new_cc <- function(c1, c2, le) {
cols <- c("country", "X2018", "recent_change")
ccs <- le[le$country == c1 | le$country == c2, cols]
return(ccs)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(new_cc("United States", "Cuba", life_exp_df))
compare_countries <- function(country_one, country_two, life_exp) {
# to filter on the columns we want
cols <- c("country", "X2018", "recent_change")
# get the two countries we want
countries_df <- life_exp[life_exp$country_one == country_one | life_exp$country_two == country_two, cols]
return(countries_df)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
print(us_vs_cuba)
print(us_vs_cuba)
print(us_vs_cuba)
print(us_vs_cuba)
print(us_vs_cuba)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# function get_col_mean() takes a column from a data frame and returns the mean
get_col_mean <- function(column) {
mean <- mean(column, na.rm = TRUE)  # gets mean without accounting for NAs
return(mean)
}
# call get_col_mean to get average life expectancy in 2018
print(get_col_mean(life_exp_df$X2018))
# world_averages is a list of average life expectancies in different years
world_averages <- lapply(life_exp_df[,-1], FUN = get_col_mean)
# print the difference in life expectancy between 2018 and 1918
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# add a column, recent_change, to life_exp_df which contains the change in life
# expectancy from 1996 to 2016
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# num_small_gain is the number of countries whose life expectancy did not improve
# 1 or more years between 1996 to 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# most_improved is the name of the country with the largest gain in life expectancy
max_gain <- max(life_exp_df[, "recent_change"], na.rm = TRUE)
most_improved <- life_exp_df[life_exp_df$recent_change == max_gain, "country"]
print(most_improved)
# get_country_change takes a country's name and a data frame of life expectancies as
# parameters and returns the country's change in life expectancy between 1968 and 2018
get_country_change <- function(country_name, life_exp) {
life_exp$change <- life_exp$X2018 - life_exp$X1968  # find change in the two years
country_change <- life_exp[life_exp$country == country_name, "change"]
return(country_change)
}
# use get_country_change to get the change in Haiti between 1968 and 2018
print(get_country_change("Haiti", life_exp_df))
# function compare_countries takes two country names and a data frame of life expectancies
# as arguments and returns a new data frame representing a table with life expectancies in
# 2018 and the recent change
compare_countries <- function(country_one, country_two, life_exp) {
# to filter on the columns we want
cols <- c("country", "X2018", "recent_change")
# get the two countries we want
countries_df <- life_exp[life_exp$country_one == country_one | life_exp$country_two == country_two, cols]
return(countries_df)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
compare_countries <- function(country_one, country_two, life_exp) {
# to filter on the columns we want
cols <- c("country", "X2018", "recent_change")
# get the two countries we want
countries_df <- life_exp[life_exp$country == country_one | life_exp$country == country_two, cols]
return(countries_df)
}
# use compare_countries function to compare US and Cuba in dataframe us_vs_cuba
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
setwd("~/Library/CloudStorage/iCloud Drive/Documents/INFO 201/book-exercises/chapter-10-exercises/exercise-4")
grants <- read.csv("data/gates_money.csv")
View(grants)
print(is.vector(organization))
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
print(is.vector(organization))
print(organization)
organization <- grants[,"organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
print(is.vector(organization))
View(grants)
print(mean(grants$total_amount))
print(max(grants$total_amount))
print(min(grants$total_amount))
print(grants[grants$total_amount == max(grants$total_amount), "organization"])
install.packages('nycflights13')
load(library())
install.packages('nycflights13')
library('nycflights13')
library('dplyr')
install.packages('dplyr')
??flights
install.packages("dplyr")
