View(movies)
id <- 3894
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
View(movies)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
summarize(
most_votes = max(vote_count),
least_votes = min(vote_count),
avg_votes = mean(vote_count)
) %>%
select(year, vote_count, title)
View(movies$vote_count)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
select(year, vote_count, title)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
summarize(
most_votes = max(vote_count)
) %>%
select(year, vote_count, title)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
View(movies)
View(movies$vote_count)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
View(movies)
View(movies$vote_count)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
View(movies)
View(movies$vote_count)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
print('done')
View(movies)
id <- 3894
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
View(movies)
View(movies$vote_count)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
id <- 3894
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
arrange(-year) %>%
select(year, vote_count, title)
print('done')
corr_coef <- cor(movies$year, movies$vote_count)
id <- 3894
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020)
arrange(-year) %>%
select(year, vote_count, title)
print('done')
corr_coef <- cor(movies$year, movies$vote_count)
id <- 3894
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
response <- GET(url, query = key_param)
content <- content(response, 'text')
json <- fromJSON(content)
cast <- json$cast
movies <- na.omit(cast)
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
arrange(-year) %>%
select(year, vote_count, title)
print('done')
corr_coef <- cor(movies$year, movies$vote_count)
corr_coef <- cor(movies$year, movies$vote_count)
print(corr_coef)
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes = max(total_votes))
View(most_popular)
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
View(most_popular)
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
View(least_popular)
analyze_actor() <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
movies <- na.omit(cast)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef <- correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
analyze_actor <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
movies <- na.omit(cast)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef <- correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
View(analyze_actor(id)$most_popular_year)
View(analyze_actor(id)$cor_coef)
print(analyze_actor(id)$cor_coef)
analyze_actor <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
movies <- na.omit(cast)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
print(correlation)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef <- correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
id <- 3894
View(analyze_actor(id))
analyze_actor <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
movies <- na.omit(cast)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
print(correlation)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef = correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
id <- 3894
print(analyze_actor(id)$cor_coef)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
#```{r setup, include=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
#```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
# 2. Specific Actor Data
# define get_actor_data() that gets information about a specific actor,
# takes in a name and returns a list of data about that actor
get_actor_data <- function(actor_name) {
# create a url that is the path to the data
search_url <- paste(base_url, '/search/person', sep = '')
# create a list of params that can be passed in the GET request
params_list <- list(query = actor_name, api_key = tmdb_key)
# use GET request to get a response with the data
search_response <- GET(search_url, query = params_list)
# make data an R data structure
search_content <- content(search_response, 'text')
search_json <- fromJSON(search_content)
# get the actor data frame and use it to get the id and movies of the actor
search_df <- search_json$results
actor_id <- search_df$id
actor_movies <- search_df$known_for[[1]]$original_title
# use another url to acess more data about actor
details_url <- paste(base_url, '/person/', actor_id, sep = '')
# use GET request to get another response with the new data
details_response <- GET(details_url, query = key_param)
# make new data into an R data structure
details_content <- content(details_response, 'text')
details_list <- fromJSON(details_content)
# use the R data structure to get info on the imdb id and bio
actor_imdb_id <- details_list$imdb_id
actor_biography <- details_list$biography
# create a list that stores the name, id, imdb id, and bio of the actor
actor_info <- list(
name = actor_name,
id = actor_id,
imdb_id = actor_imdb_id,
biography = actor_biography,
movies = actor_movies
)
return(actor_info)
}
# 3. Analysis of an Actor
# Question: how does an actor's popularity change over time
# GET THE CORR COEF, BEST/WORST YEAR
# analyze_actor() takes an actor id and returns a list of analysis on the
# popularity of the actor over time:
# - the corr coeff (if + them more popular over time, otherwise less; a lower
#   magnitude meaning less of a linear correlation
# - best year and its votes
# - worst year and its votes
analyze_actor <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', actor_id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
View(json_content)
movies <- na.omit(json_content)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef = correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
id <- get_actor_data('Christian Bale')$id
x <- analyze_actor(id)
# 2. Specific Actor Data
# define get_actor_data() that gets information about a specific actor,
# takes in a name and returns a list of data about that actor
get_actor_data <- function(actor_name) {
# create a url that is the path to the data
search_url <- paste(base_url, '/search/person', sep = '')
# create a list of params that can be passed in the GET request
params_list <- list(query = actor_name, api_key = tmdb_key)
# use GET request to get a response with the data
search_response <- GET(search_url, query = params_list)
# make data an R data structure
search_content <- content(search_response, 'text')
search_json <- fromJSON(search_content)
# get the actor data frame and use it to get the id and movies of the actor
search_df <- search_json$results
actor_id <- search_df$id
actor_movies <- search_df$known_for[[1]]$original_title
# use another url to acess more data about actor
details_url <- paste(base_url, '/person/', actor_id, sep = '')
# use GET request to get another response with the new data
details_response <- GET(details_url, query = key_param)
# make new data into an R data structure
details_content <- content(details_response, 'text')
details_list <- fromJSON(details_content)
# use the R data structure to get info on the imdb id and bio
actor_imdb_id <- details_list$imdb_id
actor_biography <- details_list$biography
# create a list that stores the name, id, imdb id, and bio of the actor
actor_info <- list(
name = actor_name,
id = actor_id,
imdb_id = actor_imdb_id,
biography = actor_biography,
movies = actor_movies
)
return(actor_info)
}
# 3. Analysis of an Actor
# Question: how does an actor's popularity change over time
# GET THE CORR COEF, BEST/WORST YEAR
# analyze_actor() takes an actor id and returns a list of analysis on the
# popularity of the actor over time:
# - the corr coeff (if + them more popular over time, otherwise less; a lower
#   magnitude meaning less of a linear correlation
# - best year and its votes
# - worst year and its votes
analyze_actor <- function(actor_id) {
# create a url to access data from movie credits api
url <- paste(base_url, '/person/', actor_id, '/movie_credits', sep = '')
# create a GET request to get data
response <- GET(url, query = key_param)
# convert data to R data structure
content <- content(response, 'text')
json_content <- fromJSON(content)
movies <- na.omit(json_content$cast)   # get rid of all NA rows
# convert dataset to have a year column and ignore movies in 2020
movies <- movies %>%
mutate(year = as.numeric(substr(release_date, 1, 4))) %>%
filter(year < 2020) %>%
select(year, vote_count, title)
# get the correlation coefficient between year and votes
correlation <- cor(movies$year, movies$vote_count)
# get the most popular year
most_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == max(total_votes))
# get the least popular year
least_popular <- movies %>%
group_by(year) %>%
summarize(total_votes = sum(vote_count)) %>%
filter(total_votes == min(total_votes))
# create a list of the data frame, and the stats
analysis <- list(
df = movies,
cor_coef = correlation,
least_popular_year = least_popular,
most_popular_year = most_popular
)
return(analysis)
}
id <- get_actor_data('Christian Bale')$id
x <- analyze_actor(id)
install.packages('ggplot2')
?diamonds
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
?diamonds
View(diamonds)
diamonds_sample <- sample_n(1000)
diamonds_sample <- sample_n(diamonds, 1000)
diamonds_sample <- sample_n(diamonds, 1000)
plot.new(diamonds_sample)
plot.new()
ggplot(data = diamonds_sample)
print(hi)
ggplot(data = diamonds_sample) +
geom_point()
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = clarity)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = diamonds_sample$clarity)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = blue)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = blues9)
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price), color = "blue")
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_col(mapping = aes(x = carat, y = price, fill = clarity))
ggplot(data = diamonds_sample) +
geom_boxplot(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
setwd("~/Library/CloudStorage/iCloud Drive/Documents/INFO 201/book-exercises/chapter-16-exercises/exercise-2")
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds_sample) +
geom_point(mapping = aes(x = carat, y = price))
ggsave('my-plot.png')
